"""–ú–æ–¥—É–ª—å —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º."""
from logging import ERROR, INFO, Logger, getLogger
from pathlib import Path
from typing import Callable, Dict, List

from codestyle.code_path import ExpandedPathTree
from codestyle.parameters_parse import ParametersStorage
from codestyle.system_wrappers import ExitCodes, interrupt_program_flow
from codestyle.tool_wrappers import (Autoflake, Autopep8, ConsoleTool, ESLint,
                                     Flake8, HTMLCS, PHPCBF, PHPCS, Result,
                                     TOOL_SETTINGS_PATH, Stylelint,
                                     MyPy, Black)

FIX_SUCCESS = '–¢–≤–æ–π –∫–æ–¥ –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å!üí• –ú–Ω–µ –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å.'
FIX_UNSUCCESSFUL = ('–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ - {total_count}, –∏–∑ –Ω–∏—Ö –±—ã–ª–æ '
                    '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ - {total_failed}.')
CHECK_SUCCESS = ('–Ø –ø—Ä–æ–≤–µ—Ä–∏–ª —Ç–≤–æ–∏ —Ñ–∞–π–ª—ã ({total_count} —à—Ç.), –º–æ–∂–µ—à—å –Ω–µ '
                 '–±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ–± –∏—Ö –∫–∞—á–µ—Å—Ç–≤–µ. ‚ú® üí•')
CHECK_UNSUCCESSFUL = ('üíî –¢–∞–∫-—Ç–∞–∫-—Ç–∞–∞–∫... –ö–æ–ª–ª–µ–≥–∞–º –Ω–µ —Å—Ç—ã–¥–Ω–æ –≤ –≥–ª–∞–∑–∞ '
                      '—Å–º–æ—Ç—Ä–µ—Ç—å? –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–æ–≤: '
                      '{total_failed}.')
MESSAGES = {'fix': {ExitCodes.SUCCESS: FIX_SUCCESS,
                    ExitCodes.UNSUCCESSFUL: FIX_UNSUCCESSFUL},
            'check': {ExitCodes.SUCCESS: CHECK_SUCCESS,
                      ExitCodes.UNSUCCESSFUL: CHECK_UNSUCCESSFUL}}
ENABLED_TOOLS = (Flake8, Autopep8, Autoflake, ESLint, PHPCS, PHPCBF, HTMLCS,
                 Stylelint, MyPy, Black)


class ConsoleApplication:
    """–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""

    logger: Logger = getLogger(__name__)

    def __init__(self, parameters_storage: ParametersStorage):
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é.

        :param parameters_storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –∏–∑
            –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏/–∏–ª–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        """
        self.__parameters_storage = parameters_storage
        method = 'fix' if self.__parameters_storage.fix else 'check'
        self.__process_method = method
        tools = self.__create_tools()
        self.__file_suffix_tools = self.get_file_suffix_tools(tools)

        self.logger.debug('–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...')
        path_tree = ExpandedPathTree(
            *self.__parameters_storage.target,
            excludes=self.__parameters_storage.exclude)
        self.__path_generator = path_tree.path_generator

        self.logger.debug('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤...')
        self.__status_messages = MESSAGES[self.__process_method]

    def process_files(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤."""
        self.logger.info('–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤...')

        total_success = total_failed = 0
        status, log_level = ExitCodes.SUCCESS, INFO
        for path in self.__path_generator:
            for tool in self.__file_suffix_tools.get(path.suffix, []):
                process_method = getattr(tool, self.__process_method)
                result = self.__process_file(path, process_method)
                if result.is_success:
                    total_success += 1
                else:
                    total_failed += 1
        if total_failed > 0:
            status, log_level = ExitCodes.UNSUCCESSFUL, ERROR

        message = self.__status_messages[status].format(
            total_count=(total_failed + total_success),
            total_failed=total_failed)
        interrupt_program_flow(status=status, log_message=message,
                               log_level=log_level)

    def __create_tools(self) -> List[ConsoleTool]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤."""
        self.logger.debug(f'{self.__create_tools.__doc__}..')
        tools = []
        for tool in ENABLED_TOOLS:
            # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞
            if tool.optional and not getattr(self.__parameters_storage,
                                             tool.optional_flag):
                continue
            tool = tool(**self.__get_tool_kwargs(tool))
            if self.__tool_can_process(tool):
                tools.append(tool)
        return tools

    def __tool_can_process(self, tool: ConsoleTool) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        return getattr(tool, f'for_{self.__process_method}', False)

    def __process_file(self, file_path: Path,
                       process_method: Callable) -> Result:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º.

        :param file_path: –ü—É—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞.
        :param process_method: –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (fix() / check()).
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.
        """
        self.logger.info(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ {file_path}..')
        result = process_method(str(file_path))

        if result.whole_output:
            level = INFO if result.is_success else ERROR
            self.logger.log(level, result.whole_output)
        return result

    @staticmethod
    def get_file_suffix_tools(
            tools: List[ConsoleTool]) -> Dict[str, List[ConsoleTool]]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤.

        :param tools: –Ω–∞–±–æ—Ä —É—Ç–∏–ª–∏—Ç
        :return: —Å–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏, –∫–∞–∂–¥–æ–º—É –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö
            —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–≤–æ–π –Ω–∞–±–æ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —É—Ç–∏–ª–∏—Ç
        """
        file_suffix_tools = {}
        for tool in tools:
            for suffix in tool.supported_file_suffixes:
                if file_suffix_tools.get(suffix):
                    file_suffix_tools[suffix].append(tool)
                    continue
                file_suffix_tools[suffix] = [tool]
        return file_suffix_tools

    def __get_tool_kwargs(self, tool_wrapper) -> dict:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ kwarg'–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.

        :param tool_wrapper: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
        :return: –°–ª–æ–≤–∞—Ä—å —Å kwarg'–∞–º–∏.
        """
        tool_kwargs = {'configuration_path': None}

        if self.__parameters_storage.settings != TOOL_SETTINGS_PATH:
            configuration_path = self.__get_tool_configuration_path(
                tool_wrapper, self.__parameters_storage.settings)
            tool_kwargs.update({'configuration_path': str(configuration_path)})

        tool_name = tool_wrapper.cli_tool_name
        if tool_name in ('phpcs', 'phpcbf'):
            tool_kwargs.update(
                {'encoding': self.__parameters_storage.phpcs_encoding})

        return tool_kwargs

    def __get_tool_configuration_path(self, tool_wrapper,
                                      settings_path: Path) -> Path:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.

        :param tool_wrapper: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
        :param settings_path: –ü—É—Ç—å –¥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤.
        :return: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        """
        storage_configuration = getattr(
            self.__parameters_storage,
            tool_wrapper.get_name() + '_configuration')
        return settings_path / storage_configuration
